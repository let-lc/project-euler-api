{
  "id": 623,
  "published": 1521968400,
  "title": "Lambda Count",
  "content": "<p>The <i>lambda-calculus</i> is a universal model of computation at the core of functional programming languages. It is based on <i>lambda-terms</i>, a minimal programming language featuring only function definitions, function calls and variables. Lambda-terms are built according to the following rules:</p>\n<ul><li>Any <i>variable</i> $x$ (single letter, from some infinite alphabet) is a lambda-term.</li>\n<li>If $M$ and $N$ are lambda-terms, then $(M N)$ is a lambda-term, called the <i>application</i> of $M$ to $N$.</li>\n<li>If $x$ is a variable and $M$ is a term, then $(\\lambda x. M)$ is a lambda-term, called an <i>abstraction</i>. An abstraction defines an anonymous function, taking $x$ as parameter and sending back $M$.</li>\n</ul><p>A lambda-term $T$ is said to be <i>closed</i> if for all variables $x$, all occurrences of $x$ within $T$ are contained within some abstraction $(\\lambda x. M)$ in $T$. The smallest such abstraction is said to <i>bind</i> the occurrence of the variable $x$. In other words, a lambda-term is closed if all its variables are bound to parameters of enclosing functions definitions. For example, the term $(\\lambda x. x)$ is closed, while the term $(\\lambda x. (x y))$ is not because $y$ is not bound.</p>\n\n<p>Also, we can rename variables as long as no binding abstraction changes. This means that $(\\lambda x. x)$ and $(\\lambda y. y)$ should be considered equivalent since we merely renamed a parameter. Two terms equivalent modulo such renaming are called <i>$\\alpha$-equivalent</i>. Note that $(\\lambda x. (\\lambda y. (x y)))$ and $(\\lambda x. (\\lambda x. (x x)))$ are not $\\alpha$-equivalent, since the abstraction binding the first variable was the outer one and becomes the inner one. However, $(\\lambda x. (\\lambda y. (x y)))$ and $(\\lambda y. (\\lambda x. (y x)))$ are $\\alpha$-equivalent.</p>\n\n<p>The following table regroups the lambda-terms that can be written with at most $15$ symbols, symbols being parenthesis, $\\lambda$, dot and variables.</p>\n\n\\[\\begin{array}{|c|c|c|c|}\n\\hline\n(\\lambda x.x) &amp; (\\lambda x.(x x)) &amp; (\\lambda x.(\\lambda y.x)) &amp; (\\lambda x.(\\lambda y.y)) \\\\\n\\hline\n(\\lambda x.(x (x x))) &amp; (\\lambda x.((x x) x)) &amp; (\\lambda x.(\\lambda y.(x x))) &amp; (\\lambda x.(\\lambda y.(x y))) \\\\\n\\hline\n(\\lambda x.(\\lambda y.(y x))) &amp; (\\lambda x.(\\lambda y.(y y))) &amp; (\\lambda x.(x (\\lambda y.x))) &amp; (\\lambda x.(x (\\lambda y.y))) \\\\\n\\hline\n(\\lambda x.((\\lambda y.x) x)) &amp; (\\lambda x.((\\lambda y.y) x)) &amp; ((\\lambda x.x) (\\lambda x.x)) &amp; (\\lambda x.(x (x (x x)))) \\\\\n\\hline\n(\\lambda x.(x ((x x) x))) &amp; (\\lambda x.((x x) (x x))) &amp; (\\lambda x.((x (x x)) x)) &amp; (\\lambda x.(((x x) x) x)) \\\\\n\\hline\n\\end{array}\\]\n\n<p>Let be $\\Lambda(n)$ the number of distinct closed lambda-terms that can be written using at most $n$ symbols, where terms that are $\\alpha$-equivalent to one another should be counted only once. You are given that $\\Lambda(6) = 1$, $\\Lambda(9) = 2$, $\\Lambda(15) = 20$ and $\\Lambda(35) = 3166438$.</p>\n<p>Find $\\Lambda(2000)$. Give the answer modulo $1\\,000\\,000\\,007$.</p>\n\n"
}